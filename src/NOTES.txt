To create a token using TOKEN_PROGRAM_22 , we have to create a account on top of that existing deployed program ,
for that as the newly generated mint account stores some data like token name, symbol,mint Authority , free Authority it must have some lamports in it. 
and these lamports will be pay by the user who wants to create the tokenmint account.

we see the createMint func from the spl-token library and try to create our own createtoken function bcoz createMint func
is used by the solana cli and already has the access of our private key so it will sign the transaction on our behalf.
but in our case user is connected to our dapp using their wallet and we dont have access to their private keys.

 try {
            // created the keypair for our mint Account
            const keypair = Keypair.generate()         

            const metadata = {
                mint: keypair.publicKey,
                name: name,
                symbol: symbol,
                uri: imageurl,
                additionalMetadata: [],
            }
           
           // calculating the bytes require to store the metadata
            const mintLen = getMintLen([ExtensionType.MetadataPointer]);           
            const metadataLen = TYPE_SIZE + LENGTH_SIZE + pack(metadata).length;
           
           // calculating the lamports needs to be stored on the mint Account to for renting the metadata
            const lamports = await connection.getMinimumBalanceForRentExemption(mintLen + metadataLen);
          
          // creating a txn and putting the intructions on it . 
          - creating the mint account
          - adding the basic metamdata like owner, mint Authority, freeze authority , decimals , program owner
          - adding the extensions and metadata pointers

            const transaction = new Transaction().add(
                SystemProgram.createAccount({
                    fromPubkey: wallet.publicKey,
                    newAccountPubkey: keypair.publicKey,
                    space: mintLen,
                    lamports,
                    programId: TOKEN_2022_PROGRAM_ID,
                }),
                createInitializeMetadataPointerInstruction(keypair.publicKey, wallet.publicKey, keypair.publicKey, TOKEN_2022_PROGRAM_ID),
                createInitializeMintInstruction(keypair.publicKey, 9, wallet.publicKey, wallet.publicKey, TOKEN_2022_PROGRAM_ID),
                createInitializeInstruction({
                    programId: TOKEN_2022_PROGRAM_ID,
                    mint: keypair.publicKey,
                    metadata: keypair.publicKey,
                    name: metadata.name,
                    symbol: metadata.symbol,
                    uri: metadata.uri,
                    mintAuthority: wallet.publicKey,
                    updateAuthority: wallet.publicKey
                })
            );

            console.log(wallet.publicKey);
            transaction.feePayer = wallet.publicKey;
            transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;
            
            // to create a mint account , the txn needs to be signed by the mint account keypair and the user's keypair
           
           // partially signing the txn by mint account keypair
            transaction.partialSign(keypair);
            
            // sending the partially signed txn to user so that he will sign it and send it to the blockchain
            const signature = await wallet.sendTransaction(transaction, connection);
            console.log(signature);
            console.log("Mint Account created !! ", keypair.publicKey.toBase58());
            
            // for minting the token , firstly we have to create a ATA for that user on top of mint account
           - generating  a associated Token account address for the user 
            const associatedToken = getAssociatedTokenAddressSync(
                keypair.publicKey,
                wallet.publicKey,
                false,
                TOKEN_2022_PROGRAM_ID
            );

            console.log(associatedToken.toBase58());
            
            // creating a txn to create a ATA for the user 
            const transaction2 = new Transaction().add(
                createAssociatedTokenAccountInstruction(
                    wallet.publicKey,
                    associatedToken,
                    wallet.publicKey,
                    keypair.publicKey,
                    TOKEN_2022_PROGRAM_ID
                ),
            );
            

            // sending the txn towards users ot sign & send it to blockchain 
            await wallet.sendTransaction(transaction2, connection);
           
           // minting & sending the tokens for the user on his ATA account
            const transaction3 = new Transaction().add(
                createMintToInstruction(keypair.publicKey, associatedToken, wallet.publicKey, supply, [], TOKEN_2022_PROGRAM_ID)
            );

            await wallet.sendTransaction(transaction3, connection);
            console.log("Token Minted !")
            setToken(keypair.publicKey.toBase58());
            toast.success("Token created and minted successfully!", { id: toastId });
        } catch (err) {
            console.error(err);
            toast.error("Token creation failed!", { id: toastId });
        }
